@page
@model MicroOndas.Web.Pages.IndexModel

<h1>Simulador de Micro-ondas</h1>
<div>
    <label>Tempo (s):</label>
    <input type="number" id="tempo" min="0" max="120" />

    <label>Potência (opcional):</label>
    <input type="number" id="potencia" min="1" max="10" />
</div>
<hr />
<div>
    <div style="display: flex; gap: 20px; align-items: center; margin-bottom: 20px;">
        <div>
            <label for="display">Tempo Restante:</label>
            <span id="display" style=" padding: 6px 14px; border-radius: 10px; border: 1px solid ;"></span>
        </div>
        <div>
            <label for="potenciaUsada">Potência usada:</label>
            <span id="potenciaUsada" style=" padding: 6px 14px; border-radius: 10px; border: 1px solid ;">-</span>
        </div>
    </div>
    
    <p>Processo: <span id="processoAquecimento">-</span></p>
    <p>Status: <span id="status">Aguardando</span></p>
</div>
<hr />
<div id="painelNumerico">
    <p>Ou use o teclado digital:</p>
    <div>
        <button class="tecla">1</button>
        <button class="tecla">2</button>
        <button class="tecla">3</button>
    </div>
    <div>
        <button class="tecla">4</button>
        <button class="tecla">5</button>
        <button class="tecla">6</button>
    </div>
    <div>
        <button class="tecla">7</button>
        <button class="tecla">8</button>
        <button class="tecla">9</button>
    </div>
    <div>
        <button class="tecla">0</button>
        <button id="limpar">Limpar</button>
    </div>
    <div>
        <button id="btnIniciar">Iniciar</button>
        <button id="btnInterromper">Interromper</button>
    </div>
<hr />

</div>
<h2>Programas Rápidos</h2>
<div id="botoesProgramas">
    <!-- Botões serão carregados via JavaScript -->
</div>
<hr />
<h3>Criar Programa Customizado</h3>
<form id="formPrograma">
    <div>
        <label for="nome">Nome:</label>
        <input type="text" id="nomePrograma" name="nome" required />
    </div>
    <div>
        <label for="tempo">Tempo (em segundos):</label>
        <input type="number" id="tempoPrograma" name="tempo" required />
    </div>
    <div>
        <label for="potencia">Potência (1 a 10):</label>
        <input type="number" id="potenciaPrograma" name="potencia" min="1" max="10" required />
    </div>
    <div>
        <label for="caractere">Caractere de aquecimento:</label>
        <input type="text" id="caracterePrograma" name="caractere" maxlength="1" required />
    </div>
    <div>
        <label for="instrucao">Instruções:</label>
        <input type="text" id="instrucaoPrograma" name="instrucao" />
    </div>
    <button type="submit">Cadastrar programa</button>
</form>

@section Scripts {
    <script>
        const baseUrl = 'https://localhost:7202'; // PORTA

        document.getElementById('btnIniciar').addEventListener('click', async () => {
            const tempo = parseInt(document.getElementById('tempo').value);
            const potencia = parseInt(document.getElementById('potencia').value);

            const status = document.getElementById('status');
            const display = document.getElementById('display');

                    let body = {};

        if (!isNaN(tempo)) {
            if (tempo < 1 || tempo > 120) {
                status.textContent = 'Tempo inválido (1s a 120s)';
                return;
            }
            body.tempoEmSegundos = tempo;
        }

        if (!isNaN(potencia)) {
            body.potencia = potencia;
            body.usarProgramaPredefinido = false;
        }

            try {
                        const response = await fetch(`${baseUrl}/api/aquecer`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });

                const data = await response.json();

                if (!response.ok) {
                    status.textContent = data.error || 'Erro';
                    return;
                }

                document.getElementById('potenciaUsada').textContent = data.potenciaUtilizada || 10;

                document.getElementById('processoAquecimento').textContent = data.resultado || '';

                status.textContent = 'Aquecendo...';
                let restante = isNaN(tempo) ? parseInt(data.tempoFormatado.split(':')[0]) * 60 + parseInt(data.tempoFormatado.split(':')[1]) : tempo;

                const timer = setInterval(() => {
                    const minutos = String(Math.floor(restante / 60)).padStart(2, '0');
                    const segundos = String(restante % 60).padStart(2, '0');
                    display.textContent = `${minutos}:${segundos}`;

                    if (restante <= 0) {
                        clearInterval(timer);
                        status.textContent = 'Finalizado!';
                    }

                    restante--;
                }, 1000);

                // Botão de interrupção
                document.getElementById('btnInterromper').onclick = () => {
                    clearInterval(timer);
                    status.textContent = 'Interrompido.';
                    display.textContent = '00:00';
                };

            } catch (err) {
                status.textContent = 'Erro na requisição.';
                console.error(err);
            }
        });
    </script>
    <script>
        let campoAtivo = 'tempo';

        // Define campo ativo
        document.getElementById('tempo').addEventListener('focus', () => campoAtivo = 'tempo');
        document.getElementById('potencia').addEventListener('focus', () => campoAtivo = 'potencia');

        // Clique nos botões numéricos
        document.querySelectorAll('.tecla').forEach(botao => {
            botao.addEventListener('click', () => {
                const valor = botao.textContent;
                const input = document.getElementById(campoAtivo);
                input.value = (input.value + valor).slice(0, 3);
            });
        });

        // Botão limpar
        document.getElementById('limpar').addEventListener('click', () => {
            document.getElementById('tempo').value = '';
            document.getElementById('potencia').value = '';
            document.getElementById('processoAquecimento').textContent  = '-';
            campoAtivo = 'tempo';
        });
    </script>

    <script>

        // Carrega os programas ao abrir a página
        async function carregarProgramas() {
            try {
                const res = await fetch(`${baseUrl}/api/programas`);
                const programas = await res.json();

                const container = document.getElementById('botoesProgramas');
                programas.forEach(p => {
                    const btn = document.createElement('button');
                    btn.textContent = p.nome;
                    btn.classList.add('btn-programa');

                            if (p.personalizado) {
                                btn.style.fontStyle = 'italic';
                                
                            }
                    btn.addEventListener('click', () => aplicarPrograma(p));
                    container.appendChild(btn);
                });
            } catch (err) {
                console.error('Erro ao carregar programas', err);
            }
        }

        // Aplica o programa nos campos e inicia o aquecimento
                function aplicarPrograma(programa) {
            const status = document.getElementById('status');
            const display = document.getElementById('display');

            const request = {
                tempoEmSegundos: programa.tempoEmSegundos,
                potencia: programa.potencia,
                usarProgramaPredefinido: true
            };

            fetch(`${baseUrl}/api/aquecer`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(request)
            })
            .then(res => res.json().then(data => ({ ok: res.ok, data })))
            .then(({ ok, data }) => {
                if (!ok) {
                    status.textContent = data.error || 'Erro';
                    return;
                }

                document.getElementById('potenciaUsada').textContent = data.potenciaUtilizada || 10;
                document.getElementById('processoAquecimento').textContent = data.resultado || '';
                status.textContent = 'Aquecendo...';

                let restante = parseInt(data.tempoFormatado.split(':')[0]) * 60 + parseInt(data.tempoFormatado.split(':')[1]);

                const timer = setInterval(() => {
                    const minutos = String(Math.floor(restante / 60)).padStart(2, '0');
                    const segundos = String(restante % 60).padStart(2, '0');
                    display.textContent = `${minutos}:${segundos}`;

                    if (restante <= 0) {
                        clearInterval(timer);
                        status.textContent = 'Finalizado!';
                    }

                    restante--;
                }, 1000);

                document.getElementById('btnInterromper').onclick = () => {
                    clearInterval(timer);
                    status.textContent = 'Interrompido.';
                    display.textContent = '00:00';
                };
            })
            .catch(err => {
                status.textContent = 'Erro na requisição.';
                console.error(err);
            });
        }
        carregarProgramas();
    </script>

    <script> //Cadastro de Programas
        document.getElementById('formPrograma').addEventListener('submit', async (e) => {
            e.preventDefault();

            const novoPrograma = {
                nome: document.getElementById('nomePrograma').value,
                tempoEmSegundos: parseInt(document.getElementById('tempoPrograma').value),
                potencia: parseInt(document.getElementById('potenciaPrograma').value),
                caractereAquecimento: document.getElementById('caracterePrograma').value,
                instrucao: document.getElementById('instrucaoPrograma').value,
                personalizado: true
            };

            try {
                const response = await fetch(`${baseUrl}/api/programas`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(novoPrograma)
                });

                if (response.ok) {
                    alert('Programa cadastrado com sucesso!');
                    document.getElementById('formPrograma').reset();
                    document.getElementById('botoesProgramas').innerHTML = '';
                    carregarProgramas(); 
                } else {
                    const erro = await response.json();
                    alert(erro.error || 'Erro ao cadastrar programa.');
                }
            } catch (err) {
                console.error(err);
                alert('Erro ao enviar dados.');
            }
        });
    </script>
}
